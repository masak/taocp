(tem linked-list first nil)

(def prs-linked-list (lst)
  (prs "<linked-list " lst!first ">"))

(def reverse-linked-list (lst)
  (with (prev nil
         next nil)
    (loop node lst!first next node
      (set next (cdr node))   ; remember the next node so we can follow it
      (set (cdr node) prev)   ; point backwards along the list instead of forwards
      (set prev node))        ; for the next iteration, this node becomes the previous one
    (set lst!first prev)))

(set lst (make linked-list '(1 2 3 4 5)))
(reverse-linked-list lst)
(prn (prs-linked-list lst))
