(tem linked-list first nil)

(def prs-linked-list (lst)
  (prs "<linked-list " lst!first ">"))

(def rev-linked-list (lst)
  (let last (rev-linked-node lst!first)
    (set lst!first last)))

(def rev-linked-node (node (o prev))
  (if node
    (let next (cdr node)            ; remember the next node so we can follow it
      (set (cdr node) prev)         ; point backwards along the list instead of forwards
      (rev-linked-node next node))  ; recursively handle the rest of the list
    prev))
  
(set lst (make linked-list first '(1 2 3 4 5)))
(rev-linked-list lst)
(pr (prs-linked-list lst) \lf)
